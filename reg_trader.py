



from typing import Dict, List, Tuple
from datamodel import OrderDepth, TradingState, Order, Symbol, Trade, Listing
import operator
from collections import defaultdict, deque
import pandas as pd
import numpy as np
class Trader:

    current_iter = 0
    cache = deque([4899.0, 4899.0, 4891.0, 4896.0, 4896.0, 4894.0, 4891.0, 4895.0, 4891.0, 4897.0, 4893.0, 4893.0, 4892.0, 4893.0, 4893.0, 4893.0, 4898.0, 4894.0, 4894.0, 4895.0, 4895.0, 4901.0, 4894.0, 4901.0, 4894.0, 4894.0, 4899.0, 4895.0, 4900.0, 4901.0, 4900.0, 4900.0, 4901.0, 4898.0, 4896.0, 4896.0, 4895.0, 4898.0, 4899.0, 4894.0, 4894.0, 4894.0, 4899.0, 4898.0, 4892.0, 4893.0, 4898.0, 4894.0, 4895.0, 4901.0, 4894.0, 4893.0, 4899.0, 4896.0, 4891.0, 4891.0, 4891.0, 4896.0, 4892.0, 4893.0, 4893.0, 4892.0, 4892.0, 4891.0, 4895.0, 4896.0, 4894.0, 4894.0, 4896.0, 4892.0, 4892.0, 4892.0, 4890.0, 4890.0, 4896.0, 4888.0, 4893.0, 4893.0, 4893.0, 4890.0, 4895.0, 4893.0, 4888.0, 4888.0, 4894.0, 4888.0, 4892.0, 4893.0, 4893.0, 4891.0, 4891.0, 4887.0, 4888.0, 4892.0, 4892.0, 4886.0, 4885.0, 4885.0, 4891.0, 4885.0, 4885.0, 4885.0, 4885.0, 4884.0, 4884.0, 4884.0, 4883.0, 4883.0, 4884.0, 4884.0, 4889.0, 4885.0, 4889.0, 4888.0, 4883.0, 4884.0, 4883.0, 4883.0, 4883.0, 4888.0, 4891.0, 4890.0, 4888.0, 4886.0, 4885.0, 4887.0, 4892.0, 4894.0, 4886.0, 4886.0, 4886.0, 4887.0, 4886.0, 4887.0, 4886.0, 4886.0, 4888.0, 4894.0, 4891.0, 4892.0, 4891.0, 4895.0, 4889.0, 4890.0, 4895.0, 4889.0, 4895.0, 4890.0, 4891.0, 4896.0, 4896.0, 4895.0, 4891.0, 4897.0, 4891.0, 4893.0, 4893.0, 4892.0, 4892.0, 4900.0, 4901.0, 4894.0, 4894.0, 4893.0, 4893.0, 4896.0, 4893.0, 4893.0, 4893.0, 4894.0, 4900.0, 4893.0, 4900.0, 4895.0, 4892.0, 4900.0, 4899.0, 4895.0, 4894.0, 4895.0, 4902.0, 4894.0, 4895.0, 4895.0, 4902.0, 4900.0, 4894.0, 4892.0, 4892.0, 4893.0, 4891.0, 4891.0, 4892.0, 4899.0, 4898.0, 4895.0, 4899.0, 4895.0, 4901.0, 4899.0, 4896.0, 4893.0, 4893.0, 4899.0, 4898.0, 4897.0, 4892.0, 4891.0, 4891.0, 4895.0, 4895.0, 4896.0, 4899.0, 4892.0, 4894.0, 4895.0, 4900.0, 4895.0, 4895.0, 4902.0, 4900.0, 4894.0, 4894.0, 4894.0, 4899.0, 4894.0, 4895.0, 4900.0, 4900.0, 4898.0, 4900.0, 4896.0, 4892.0, 4891.0, 4896.0, 4896.0, 4896.0, 4891.0, 4892.0, 4896.0, 4895.0, 4895.0, 4895.0, 4895.0, 4895.0, 4895.0, 4895.0, 4888.0, 4893.0, 4893.0, 4893.0, 4889.0, 4890.0, 4895.0, 4894.0, 4895.0, 4894.0, 4894.0, 4891.0, 4892.0, 4891.0, 4897.0, 4898.0, 4892.0, 4899.0, 4892.0, 4897.0, 4893.0, 4890.0, 4890.0, 4891.0, 4891.0, 4893.0, 4897.0, 4894.0, 4894.0, 4899.0, 4896.0, 4895.0, 4895.0, 4901.0, 4901.0, 4896.0, 4897.0, 4898.0, 4902.0, 4898.0, 4904.0, 4899.0, 4898.0, 4903.0, 4906.0, 4898.0, 4904.0, 4899.0, 4900.0, 4900.0, 4900.0, 4904.0, 4905.0, 4903.0, 4898.0, 4903.0, 4898.0, 4905.0, 4899.0, 4901.0, 4900.0, 4907.0, 4900.0, 4900.0, 4905.0, 4902.0, 4904.0, 4898.0, 4902.0, 4902.0, 4898.0, 4904.0, 4901.0, 4897.0, 4897.0, 4897.0, 4898.0, 4903.0, 4903.0, 4903.0, 4899.0, 4899.0, 4899.0, 4905.0, 4903.0, 4899.0, 4899.0, 4899.0, 4900.0, 4899.0, 4900.0, 4906.0, 4907.0, 4907.0, 4907.0, 4907.0, 4907.0, 4907.0, 4901.0, 4907.0, 4904.0, 4902.0, 4906.0, 4903.0, 4902.0, 4903.0, 4904.0, 4909.0, 4904.0, 4910.0, 4908.0, 4909.0, 4908.0, 4908.0, 4905.0, 4911.0, 4905.0, 4910.0, 4909.0, 4910.0, 4905.0, 4910.0, 4903.0, 4902.0, 4908.0, 4902.0, 4909.0, 4906.0, 4907.0, 4901.0, 4900.0, 4900.0, 4900.0, 4899.0, 4905.0, 4899.0, 4900.0, 4904.0, 4907.0, 4903.0, 4908.0, 4906.0, 4907.0, 4906.0, 4903.0, 4902.0, 4902.0, 4906.0, 4902.0, 4902.0, 4901.0, 4901.0, 4900.0, 4901.0, 4905.0, 4902.0, 4904.0, 4903.0, 4904.0, 4904.0, 4900.0, 4900.0, 4907.0, 4902.0, 4902.0, 4905.0, 4906.0, 4900.0, 4901.0, 4907.0, 4901.0, 4907.0, 4907.0, 4905.0, 4906.0, 4900.0, 4901.0, 4908.0, 4903.0, 4907.0, 4904.0, 4910.0, 4911.0, 4910.0, 4910.0, 4907.0, 4910.0, 4909.0, 4909.0, 4905.0, 4904.0, 4904.0, 4903.0, 4904.0, 4908.0, 4902.0, 4901.0, 4901.0, 4906.0, 4905.0, 4901.0, 4899.0, 4899.0, 4905.0, 4899.0, 4901.0, 4905.0, 4902.0, 4908.0, 4906.0, 4900.0, 4906.0, 4900.0, 4900.0, 4906.0, 4906.0, 4898.0, 4898.0, 4899.0, 4899.0, 4897.0, 4902.0, 4901.0, 4895.0, 4895.0, 4895.0, 4895.0, 4900.0, 4899.0, 4897.0, 4903.0, 4904.0, 4900.0, 4899.0, 4904.0, 4904.0, 4898.0, 4904.0, 4901.0, 4901.0, 4896.0, 4902.0, 4896.0, 4896.0, 4896.0, 4896.0, 4903.0, 4901.0, 4896.0, 4898.0, 4902.0, 4895.0, 4896.0, 4897.0, 4899.0, 4894.0, 4898.0, 4898.0, 4898.0, 4899.0, 4894.0, 4895.0, 4894.0, 4901.0, 4894.0, 4894.0, 4894.0, 4895.0, 4894.0, 4893.0, 4893.0, 4899.0, 4899.0, 4898.0, 4899.0, 4895.0, 4902.0, 4898.0, 4899.0, 4899.0, 4904.0, 4898.0, 4903.0, 4905.0, 4896.0, 4902.0, 4903.0, 4904.0, 4899.0, 4900.0, 4899.0, 4899.0, 4899.0, 4899.0, 4904.0, 4900.0, 4900.0, 4899.0, 4899.0, 4900.0, 4906.0, 4906.0, 4899.0, 4899.0, 4897.0, 4897.0, 4897.0, 4897.0, 4904.0, 4899.0, 4899.0, 4905.0, 4906.0, 4899.0, 4899.0, 4899.0, 4907.0, 4902.0, 4901.0, 4906.0, 4903.0, 4910.0, 4910.0, 4905.0, 4906.0, 4905.0, 4911.0, 4911.0, 4909.0, 4904.0, 4909.0, 4909.0, 4904.0, 4910.0, 4908.0, 4906.0, 4902.0, 4907.0, 4908.0, 4905.0, 4899.0, 4905.0, 4899.0, 4898.0, 4896.0, 4897.0, 4902.0, 4900.0, 4895.0, 4901.0, 4901.0, 4894.0, 4893.0, 4899.0, 4895.0, 4897.0, 4895.0, 4895.0, 4899.0, 4895.0, 4895.0, 4895.0, 4896.0, 4900.0, 4895.0, 4896.0, 4897.0, 4900.0, 4894.0, 4900.0, 4900.0, 4900.0, 4900.0, 4896.0, 4896.0, 4902.0, 4900.0, 4903.0, 4897.0, 4898.0, 4897.0, 4901.0, 4900.0, 4902.0, 4899.0, 4901.0, 4899.0, 4900.0, 4898.0, 4894.0, 4900.0, 4895.0, 4902.0, 4903.0, 4897.0, 4903.0, 4894.0, 4895.0, 4899.0, 4893.0, 4895.0, 4893.0, 4892.0, 4896.0, 4896.0, 4896.0, 4891.0, 4892.0, 4897.0, 4893.0, 4900.0, 4900.0, 4894.0, 4894.0, 4900.0, 4898.0, 4899.0, 4896.0, 4897.0, 4899.0, 4892.0, 4892.0, 4898.0, 4899.0, 4892.0, 4892.0, 4892.0, 4897.0, 4890.0, 4890.0, 4891.0, 4891.0, 4897.0, 4898.0, 4897.0, 4899.0, 4894.0, 4893.0, 4896.0, 4896.0, 4892.0, 4891.0, 4892.0, 4892.0, 4892.0, 4892.0, 4897.0, 4898.0, 4890.0, 4890.0, 4895.0, 4888.0, 4892.0, 4887.0, 4888.0, 4888.0, 4887.0, 4887.0, 4889.0, 4887.0, 4888.0, 4887.0, 4887.0, 4892.0, 4892.0, 4888.0, 4893.0, 4893.0, 4894.0, 4894.0, 4888.0, 4893.0, 4889.0, 4893.0, 4893.0, 4895.0, 4888.0, 4893.0, 4888.0, 4893.0, 4888.0, 4892.0, 4891.0, 4895.0, 4897.0, 4897.0, 4893.0, 4897.0, 4900.0, 4893.0, 4899.0, 4892.0, 4891.0, 4892.0, 4897.0, 4892.0, 4891.0, 4891.0, 4890.0, 4892.0, 4890.0, 4890.0, 4890.0, 4890.0, 4897.0, 4895.0, 4895.0, 4895.0, 4897.0, 4893.0, 4898.0, 4891.0, 4892.0, 4891.0, 4896.0, 4891.0, 4895.0, 4890.0, 4891.0, 4895.0, 4896.0, 4890.0, 4889.0, 4888.0, 4896.0, 4890.0, 4892.0, 4891.0, 4897.0, 4889.0, 4890.0, 4890.0, 4895.0, 4895.0, 4891.0, 4889.0, 4889.0, 4890.0, 4896.0, 4891.0, 4891.0, 4896.0, 4896.0, 4892.0, 4898.0, 4891.0, 4896.0, 4892.0, 4891.0, 4891.0, 4894.0, 4896.0, 4891.0, 4892.0, 4892.0, 4892.0, 4892.0, 4892.0, 4891.0, 4892.0, 4892.0, 4898.0, 4898.0, 4897.0, 4898.0, 4896.0, 4897.0, 4891.0, 4892.0, 4890.0, 4895.0, 4896.0, 4897.0, 4896.0, 4890.0, 4889.0, 4890.0, 4889.0, 4896.0, 4895.0, 4895.0, 4897.0, 4896.0, 4892.0, 4897.0, 4893.0, 4895.0, 4900.0, 4897.0, 4890.0, 4891.0, 4890.0, 4890.0, 4890.0, 4890.0, 4896.0, 4890.0, 4895.0, 4890.0, 4890.0, 4891.0, 4896.0, 4897.0, 4892.0, 4892.0, 4890.0, 4894.0, 4890.0, 4890.0, 4894.0, 4894.0, 4895.0, 4896.0, 4896.0, 4897.0, 4897.0, 4896.0, 4891.0, 4891.0, 4897.0, 4892.0, 4898.0, 4893.0, 4893.0, 4893.0, 4894.0, 4897.0, 4897.0, 4892.0, 4897.0, 4897.0, 4898.0, 4893.0, 4898.0, 4893.0, 4898.0, 4896.0, 4893.0, 4892.0, 4891.0, 4896.0, 4891.0, 4891.0, 4891.0, 4897.0, 4896.0, 4897.0, 4891.0, 4891.0, 4891.0, 4897.0, 4891.0, 4892.0, 4896.0, 4897.0, 4891.0, 4895.0, 4890.0, 4890.0, 4895.0, 4890.0, 4891.0, 4891.0, 4894.0, 4895.0, 4895.0, 4894.0, 4888.0, 4894.0, 4894.0, 4892.0, 4892.0, 4888.0, 4894.0, 4887.0, 4887.0, 4893.0, 4889.0, 4896.0, 4890.0, 4896.0, 4895.0, 4891.0, 4890.0, 4896.0, 4894.0, 4889.0, 4890.0, 4888.0, 4887.0, 4893.0, 4893.0, 4893.0, 4888.0, 4888.0, 4892.0, 4893.0, 4887.0, 4885.0, 4892.0, 4891.0, 4886.0, 4890.0, 4888.0, 4893.0, 4893.0, 4885.0, 4884.0, 4885.0, 4884.0, 4884.0, 4888.0, 4888.0, 4888.0, 4885.0, 4883.0, 4889.0, 4889.0, 4884.0, 4887.0, 4887.0, 4887.0, 4885.0, 4891.0, 4891.0, 4888.0, 4887.0, 4890.0, 4893.0, 4895.0, 4888.0, 4893.0, 4893.0, 4887.0, 4887.0, 4893.0, 4892.0, 4887.0, 4887.0, 4888.0, 4888.0, 4886.0, 4887.0, 4890.0, 4883.0, 4884.0, 4886.0, 4890.0, 4891.0, 4884.0, 4892.0, 4886.0, 4886.0, 4885.0, 4892.0, 4886.0, 4889.0, 4889.0, 4889.0, 4890.0, 4884.0, 4883.0, 4888.0, 4889.0, 4889.0, 4891.0, 4887.0, 4887.0, 4893.0, 4886.0, 4887.0, 4887.0, 4890.0, 4892.0, 4887.0, 4893.0, 4885.0, 4885.0, 4890.0, 4890.0, 4892.0, 4886.0, 4893.0, 4887.0, 4886.0, 4887.0, 4886.0, 4886.0, 4887.0, 4887.0, 4886.0, 4891.0, 4887.0, 4887.0, 4888.0, 4894.0, 4889.0, 4893.0, 4892.0, 4888.0, 4891.0, 4891.0, 4886.0, 4891.0, 4892.0, 4888.0, 4887.0, 4892.0, 4889.0, 4888.0, 4889.0, 4888.0, 4895.0, 4894.0, 4888.0, 4888.0, 4895.0, 4889.0, 4896.0, 4894.0, 4897.0, 4890.0, 4894.0, 4894.0, 4894.0, 4893.0, 4894.0, 4896.0, 4895.0, 4889.0, 4897.0, 4895.0, 4894.0, 4895.0, 4890.0, 4896.0, 4895.0, 4890.0, 4889.0, 4895.0, 4888.0, 4888.0, 4889.0, 4889.0, 4889.0, 4894.0, 4893.0, 4888.0, 4895.0, 4888.0, 4893.0, 4887.0, 4893.0, 4887.0, 4887.0, 4889.0, 4895.0, 4893.0, 4890.0, 4889.0, 4890.0, 4895.0, 4890.0, 4892.0, 4890.0, 4890.0, 4892.0, 4896.0, 4890.0, 4891.0, 4895.0, 4892.0, 4891.0, 4896.0, 4893.0, 4891.0, 4898.0, 4894.0, 4896.0, 4892.0, 4898.0, 4894.0, 4895.0, 4897.0, 4896.0, 4896.0, 4896.0, 4896.0, 4889.0, 4894.0, 4890.0, 4893.0, 4891.0, 4890.0, 4891.0, 4892.0, 4897.0, 4898.0, 4892.0, 4892.0, 4897.0, 4892.0, 4896.0, 4892.0, 4897.0, 4897.0, 4896.0, 4892.0, 4897.0, 4892.0, 4899.0, 4896.0, 4897.0, 4890.0, 4897.0, 4895.0, 4895.0, 4891.0, 4895.0, 4891.0, 4897.0, 4896.0, 4896.0, 4892.0, 4892.0, 4896.0, 4896.0, 4892.0, 4892.0, 4892.0, 4890.0, 4891.0, 4891.0, 4895.0, 4891.0, 4891.0, 4891.0, 4897.0, 4896.0, 4895.0, 4896.0, 4896.0, 4894.0, 4894.0, 4894.0, 4894.0, 4893.0, 4892.0, 4893.0, 4893.0, 4898.0, 4893.0, 4893.0, 4892.0, 4897.0, 4895.0, 4900.0, 4896.0, 4899.0, 4895.0, 4899.0, 4898.0, 4895.0, 4896.0, 4891.0, 4897.0, 4892.0, 4891.0, 4890.0, 4890.0, 4895.0, 4891.0, 4890.0, 4895.0, 4896.0, 4894.0, 4894.0, 4889.0, 4895.0, 4897.0, 4891.0, 4895.0, 4895.0, 4891.0, 4891.0, 4891.0, 4891.0, 4891.0, 4896.0, 4894.0, 4894.0, 4891.0, 4895.0, 4896.0, 4892.0, 4892.0, 4892.0, 4896.0, 4898.0, 4898.0, 4898.0, 4896.0, 4893.0, 4892.0, 4893.0, 4894.0, 4891.0, 4897.0, 4893.0, 4897.0, 4896.0, 4895.0, 4890.0, 4894.0, 4891.0, 4897.0, 4890.0, 4890.0, 4889.0, 4888.0, 4889.0, 4887.0, 4888.0, 4889.0, 4890.0, 4895.0, 4893.0, 4892.0, 4888.0, 4888.0, 4888.0, 4887.0, 4893.0, 4894.0, 4889.0, 4890.0, 4894.0, 4894.0, 4892.0, 4892.0, 4892.0, 4892.0, 4887.0, 4892.0, 4890.0, 4890.0, 4890.0, 4890.0, 4886.0, 4891.0, 4890.0, 4885.0, 4886.0, 4886.0, 4886.0, 4885.0, 4886.0, 4886.0, 4886.0, 4889.0, 4889.0, 4886.0, 4891.0, 4886.0, 4892.0, 4888.0, 4887.0, 4891.0, 4890.0, 4892.0, 4889.0, 4894.0, 4887.0, 4887.0, 4892.0, 4892.0, 4892.0, 4894.0, 4893.0, 4887.0, 4888.0, 4887.0, 4892.0, 4892.0, 4892.0, 4887.0, 4886.0, 4887.0, 4891.0, 4886.0, 4892.0, 4887.0, 4893.0, 4886.0, 4887.0, 4892.0, 4888.0, 4892.0, 4886.0, 4885.0, 4885.0, 4887.0, 4890.0, 4882.0, 4882.0, 4882.0, 4881.0, 4887.0, 4886.0, 4881.0, 4881.0, 4881.0, 4881.0, 4880.0, 4881.0, 4883.0, 4882.0, 4882.0, 4887.0, 4886.0, 4887.0, 4881.0, 4881.0, 4887.0, 4882.0, 4885.0, 4879.0, 4879.0, 4883.0, 4885.0, 4885.0, 4885.0, 4886.0, 4884.0, 4878.0, 4878.0, 4879.0, 4887.0, 4885.0, 4881.0, 4886.0, 4887.0, 4883.0, 4882.0, 4886.0, 4882.0, 4881.0, 4881.0, 4882.0, 4882.0, 4882.0, 4890.0, 4891.0, 4891.0, 4890.0, 4890.0, 4885.0, 4883.0, 4888.0, 4884.0, 4884.0, 4884.0, 4883.0, 4889.0, 4886.0, 4886.0, 4886.0, 4881.0, 4885.0, 4886.0, 4883.0, 4879.0, 4878.0, 4884.0, 4885.0, 4878.0, 4883.0, 4881.0, 4885.0, 4882.0, 4879.0, 4879.0, 4877.0, 4878.0, 4882.0, 4883.0, 4877.0, 4885.0, 4876.0, 4883.0, 4877.0, 4876.0, 4882.0, 4882.0, 4883.0, 4876.0, 4881.0, 4875.0, 4881.0, 4880.0, 4875.0, 4875.0, 4880.0, 4881.0, 4881.0, 4875.0, 4881.0, 4876.0, 4875.0, 4875.0, 4881.0, 4874.0, 4874.0, 4878.0, 4873.0, 4876.0, 4877.0, 4877.0, 4874.0, 4875.0, 4879.0, 4872.0, 4873.0, 4874.0, 4879.0, 4878.0, 4878.0, 4881.0, 4876.0, 4875.0, 4879.0, 4875.0, 4876.0, 4881.0, 4882.0, 4882.0, 4882.0, 4877.0, 4882.0, 4878.0, 4883.0, 4877.0, 4883.0, 4880.0, 4885.0, 4885.0, 4883.0, 4884.0, 4883.0, 4878.0, 4879.0, 4879.0, 4885.0, 4883.0, 4878.0, 4884.0, 4879.0, 4881.0, 4883.0, 4881.0, 4879.0, 4886.0, 4884.0, 4882.0, 4883.0, 4886.0, 4889.0, 4889.0, 4883.0, 4883.0, 4890.0, 4891.0, 4890.0, 4890.0, 4886.0, 4890.0, 4884.0, 4889.0, 4888.0, 4889.0, 4888.0, 4888.0, 4884.0, 4887.0, 4888.0, 4884.0, 4884.0, 4890.0, 4891.0, 4888.0, 4888.0, 4890.0, 4886.0, 4887.0, 4891.0, 4891.0, 4891.0, 4887.0, 4888.0, 4891.0, 4889.0, 4889.0, 4887.0, 4887.0, 4887.0, 4888.0, 4893.0, 4892.0, 4887.0, 4889.0, 4885.0, 4886.0, 4887.0, 4889.0, 4884.0, 4888.0, 4883.0, 4889.0, 4884.0, 4884.0, 4885.0, 4891.0, 4892.0, 4892.0, 4886.0, 4889.0, 4886.0, 4886.0, 4887.0, 4886.0, 4886.0, 4886.0, 4886.0, 4886.0, 4887.0, 4887.0, 4891.0, 4886.0, 4886.0, 4891.0, 4887.0, 4888.0, 4888.0, 4888.0, 4887.0, 4888.0, 4883.0, 4883.0, 4890.0, 4885.0, 4890.0, 4884.0, 4891.0, 4890.0, 4892.0, 4886.0, 4892.0, 4887.0, 4888.0, 4887.0, 4892.0, 4888.0, 4887.0, 4887.0, 4887.0, 4887.0, 4886.0, 4889.0, 4886.0, 4893.0, 4892.0, 4886.0, 4887.0, 4887.0, 4886.0, 4893.0, 4894.0, 4893.0, 4887.0, 4893.0, 4894.0, 4890.0, 4889.0, 4894.0, 4889.0, 4889.0, 4890.0, 4889.0, 4891.0, 4893.0, 4892.0, 4898.0, 4896.0, 4896.0, 4891.0, 4891.0, 4891.0, 4895.0, 4894.0, 4894.0, 4893.0, 4894.0, 4888.0, 4888.0, 4888.0, 4894.0, 4887.0, 4893.0, 4886.0, 4887.0, 4891.0, 4892.0, 4888.0, 4887.0, 4894.0, 4888.0, 4893.0, 4888.0, 4888.0, 4888.0, 4887.0, 4889.0, 4886.0, 4888.0, 4888.0, 4888.0, 4888.0, 4891.0, 4894.0, 4895.0, 4890.0, 4890.0, 4890.0, 4891.0, 4892.0, 4892.0, 4898.0, 4897.0, 4898.0, 4900.0, 4899.0, 4899.0, 4894.0, 4899.0, 4894.0, 4893.0, 4897.0, 4897.0, 4895.0, 4893.0, 4898.0, 4891.0, 4892.0, 4893.0, 4898.0, 4896.0, 4898.0, 4897.0, 4893.0, 4895.0, 4896.0, 4896.0, 4899.0, 4904.0, 4905.0, 4902.0, 4904.0, 4898.0, 4897.0, 4897.0, 4897.0, 4896.0, 4899.0, 4902.0, 4902.0, 4897.0, 4897.0, 4900.0, 4900.0, 4901.0, 4896.0, 4900.0, 4895.0, 4894.0, 4894.0, 4894.0, 4893.0, 4893.0, 4893.0, 4897.0, 4893.0, 4898.0, 4890.0, 4891.0, 4891.0, 4897.0, 4890.0, 4892.0, 4890.0, 4894.0, 4889.0, 4894.0, 4890.0, 4890.0, 4896.0, 4893.0, 4887.0, 4892.0, 4891.0, 4886.0, 4893.0, 4891.0, 4890.0, 4891.0, 4886.0, 4892.0, 4888.0, 4887.0, 4894.0, 4887.0, 4886.0, 4890.0, 4885.0, 4886.0, 4893.0, 4886.0, 4891.0, 4885.0, 4885.0, 4888.0, 4884.0, 4889.0, 4889.0, 4888.0, 4885.0, 4888.0, 4890.0, 4882.0, 4889.0, 4886.0, 4888.0, 4883.0, 4884.0, 4889.0, 4888.0, 4880.0, 4887.0, 4883.0, 4881.0, 4881.0, 4882.0, 4882.0, 4882.0, 4889.0, 4882.0, 4883.0, 4883.0, 4887.0, 4881.0, 4886.0, 4885.0, 4880.0, 4884.0, 4880.0, 4881.0, 4881.0, 4882.0, 4882.0, 4886.0, 4885.0, 4880.0, 4880.0, 4884.0, 4878.0, 4882.0, 4882.0, 4883.0, 4879.0, 4884.0, 4884.0, 4880.0, 4879.0, 4879.0, 4886.0, 4881.0, 4884.0, 4885.0, 4884.0, 4890.0, 4888.0, 4884.0, 4884.0, 4884.0, 4885.0, 4890.0, 4891.0, 4889.0, 4886.0, 4885.0, 4890.0, 4885.0, 4889.0, 4892.0, 4885.0, 4886.0, 4888.0, 4891.0, 4890.0, 4889.0, 4885.0, 4886.0, 4893.0, 4894.0, 4887.0, 4894.0, 4886.0, 4886.0, 4891.0, 4891.0, 4893.0, 4886.0, 4886.0, 4885.0, 4890.0, 4888.0, 4887.0, 4882.0, 4886.0, 4887.0, 4883.0, 4883.0, 4885.0, 4889.0, 4885.0, 4886.0, 4891.0, 4885.0, 4892.0, 4886.0, 4888.0, 4892.0, 4892.0, 4888.0, 4887.0, 4885.0, 4889.0, 4885.0, 4885.0, 4884.0, 4884.0, 4884.0, 4884.0, 4884.0, 4887.0, 4888.0, 4889.0, 4887.0, 4887.0, 4887.0, 4889.0, 4889.0, 4883.0, 4883.0, 4884.0, 4884.0, 4884.0, 4887.0, 4886.0, 4888.0, 4881.0, 4883.0, 4882.0, 4888.0, 4888.0, 4889.0, 4885.0, 4891.0, 4891.0, 4891.0, 4890.0, 4889.0, 4887.0, 4890.0, 4885.0, 4885.0, 4885.0, 4884.0, 4889.0, 4890.0, 4885.0, 4886.0, 4889.0, 4885.0, 4888.0, 4886.0, 4885.0, 4891.0, 4891.0, 4891.0, 4884.0, 4883.0, 4888.0, 4892.0, 4885.0, 4889.0, 4884.0, 4882.0, 4888.0, 4882.0, 4883.0, 4883.0, 4884.0, 4883.0, 4890.0, 4889.0, 4886.0, 4884.0, 4883.0, 4884.0, 4889.0, 4884.0, 4890.0, 4883.0, 4890.0, 4892.0, 4890.0, 4886.0, 4892.0, 4892.0, 4887.0, 4890.0, 4887.0, 4887.0, 4888.0, 4881.0, 4888.0, 4880.0, 4881.0, 4886.0, 4881.0, 4881.0, 4888.0, 4881.0, 4886.0, 4885.0, 4881.0, 4881.0, 4886.0, 4886.0, 4886.0, 4882.0, 4885.0, 4880.0, 4885.0, 4886.0, 4880.0, 4881.0, 4882.0, 4883.0, 4887.0, 4881.0, 4886.0, 4886.0, 4887.0, 4886.0, 4885.0, 4881.0, 4882.0, 4888.0, 4887.0, 4881.0, 4882.0, 4881.0, 4884.0, 4883.0, 4889.0, 4887.0, 4886.0, 4886.0, 4882.0, 4888.0, 4881.0, 4887.0, 4887.0, 4881.0, 4886.0, 4889.0, 4888.0, 4881.0, 4885.0, 4885.0, 4880.0, 4886.0, 4886.0, 4885.0, 4884.0, 4886.0, 4885.0, 4881.0, 4879.0, 4884.0, 4885.0, 4878.0, 4878.0, 4877.0, 4877.0, 4877.0, 4878.0, 4883.0, 4877.0, 4883.0, 4881.0, 4883.0, 4882.0, 4884.0, 4877.0, 4876.0, 4880.0, 4879.0, 4884.0, 4883.0, 4879.0, 4878.0, 4885.0, 4885.0, 4883.0, 4878.0, 4879.0, 4877.0, 4876.0, 4882.0, 4882.0, 4881.0, 4882.0, 4880.0, 4880.0, 4877.0, 4876.0, 4876.0, 4883.0, 4881.0, 4881.0, 4884.0, 4882.0, 4878.0, 4883.0, 4883.0, 4878.0, 4884.0, 4885.0, 4880.0, 4879.0, 4880.0, 4880.0, 4886.0, 4881.0, 4888.0, 4881.0, 4887.0, 4886.0, 4881.0, 4883.0, 4887.0, 4886.0, 4883.0, 4888.0, 4882.0, 4882.0, 4882.0, 4882.0, 4887.0, 4883.0, 4883.0, 4882.0, 4888.0, 4886.0, 4886.0, 4882.0, 4880.0, 4886.0, 4884.0, 4879.0, 4879.0, 4877.0, 4883.0, 4879.0, 4879.0, 4885.0, 4879.0, 4878.0, 4877.0, 4876.0, 4880.0, 4880.0, 4880.0, 4875.0, 4876.0, 4876.0, 4876.0, 4876.0, 4876.0, 4876.0, 4876.0, 4877.0, 4879.0, 4882.0, 4879.0, 4879.0, 4882.0, 4882.0, 4882.0, 4877.0, 4881.0, 4877.0, 4877.0, 4882.0, 4877.0, 4882.0, 4878.0, 4878.0, 4883.0, 4883.0, 4881.0, 4877.0, 4878.0, 4883.0, 4884.0, 4879.0, 4879.0, 4885.0, 4885.0, 4885.0, 4883.0, 4880.0, 4879.0, 4880.0, 4880.0, 4880.0, 4885.0, 4885.0, 4887.0, 4881.0, 4881.0, 4886.0, 4887.0, 4882.0, 4886.0, 4890.0, 4889.0, 4884.0, 4888.0, 4883.0, 4885.0, 4884.0, 4884.0, 4883.0, 4884.0, 4883.0, 4884.0, 4883.0, 4889.0, 4888.0, 4890.0, 4884.0, 4889.0, 4890.0, 4890.0, 4889.0, 4888.0, 4888.0, 4882.0, 4889.0, 4887.0, 4888.0, 4882.0, 4888.0, 4883.0, 4891.0, 4884.0, 4885.0, 4888.0, 4889.0, 4889.0, 4889.0, 4890.0, 4889.0, 4884.0, 4884.0, 4890.0, 4885.0, 4886.0, 4886.0, 4885.0, 4892.0, 4885.0, 4885.0, 4886.0, 4892.0, 4886.0, 4890.0, 4891.0, 4893.0, 4886.0, 4886.0, 4888.0, 4892.0, 4893.0, 4888.0, 4893.0, 4888.0, 4895.0, 4893.0, 4894.0, 4894.0, 4889.0, 4892.0, 4894.0, 4894.0, 4895.0, 4896.0, 4895.0, 4897.0, 4897.0, 4891.0, 4898.0, 4896.0, 4895.0, 4895.0, 4895.0, 4896.0, 4893.0, 4891.0, 4893.0, 4894.0, 4888.0, 4887.0, 4887.0, 4887.0, 4886.0, 4892.0, 4892.0, 4892.0, 4886.0, 4886.0, 4885.0, 4891.0, 4885.0, 4891.0, 4891.0, 4891.0, 4893.0, 4888.0, 4892.0, 4892.0, 4892.0, 4893.0, 4893.0, 4886.0, 4894.0, 4893.0, 4885.0, 4889.0, 4884.0, 4882.0, 4887.0, 4883.0, 4880.0, 4881.0, 4880.0, 4881.0, 4885.0, 4880.0, 4879.0, 4886.0, 4880.0, 4880.0, 4880.0, 4886.0, 4880.0, 4887.0, 4881.0, 4885.0, 4881.0, 4884.0, 4884.0, 4884.0, 4880.0, 4885.0, 4880.0, 4880.0, 4881.0, 4886.0, 4881.0, 4881.0, 4887.0, 4879.0, 4879.0, 4884.0, 4881.0, 4886.0, 4885.0, 4885.0, 4886.0, 4886.0, 4881.0, 4886.0, 4888.0, 4889.0, 4882.0, 4882.0, 4882.0, 4884.0, 4888.0, 4889.0, 4890.0, 4884.0, 4884.0, 4890.0, 4889.0, 4883.0, 4889.0, 4889.0, 4882.0, 4889.0, 4889.0, 4885.0, 4884.0, 4889.0, 4884.0, 4889.0, 4890.0, 4887.0, 4885.0, 4881.0, 4888.0, 4886.0, 4881.0, 4886.0, 4887.0, 4887.0, 4881.0, 4886.0, 4880.0, 4880.0, 4881.0, 4881.0, 4885.0, 4880.0, 4887.0, 4883.0, 4886.0, 4887.0, 4887.0, 4882.0, 4882.0, 4881.0, 4886.0, 4889.0, 4888.0, 4883.0, 4887.0, 4888.0, 4889.0, 4883.0, 4883.0, 4883.0, 4888.0, 4886.0, 4881.0, 4881.0, 4880.0, 4880.0, 4881.0, 4885.0, 4887.0, 4880.0, 4885.0, 4881.0, 4884.0, 4880.0, 4886.0, 4887.0, 4881.0, 4881.0, 4882.0, 4880.0, 4880.0, 4885.0, 4884.0, 4878.0, 4878.0, 4877.0, 4877.0, 4877.0, 4877.0, 4877.0, 4878.0, 4877.0, 4877.0, 4877.0, 4878.0, 4878.0, 4884.0, 4879.0, 4882.0, 4883.0, 4881.0, 4876.0, 4876.0, 4876.0, 4875.0, 4876.0, 4878.0, 4878.0, 4878.0, 4876.0, 4884.0, 4879.0, 4884.0, 4878.0, 4877.0, 4883.0, 4882.0, 4877.0, 4877.0, 4877.0, 4883.0, 4878.0, 4877.0, 4879.0, 4881.0, 4879.0, 4884.0, 4877.0, 4876.0, 4882.0, 4883.0, 4881.0, 4881.0, 4874.0, 4877.0, 4875.0, 4875.0, 4881.0, 4881.0, 4882.0, 4883.0, 4877.0, 4882.0, 4883.0, 4876.0, 4881.0, 4880.0, 4875.0, 4880.0, 4879.0, 4874.0, 4880.0, 4875.0, 4874.0, 4873.0, 4873.0, 4874.0, 4876.0, 4880.0, 4874.0, 4875.0, 4875.0, 4881.0, 4876.0, 4881.0, 4875.0, 4880.0, 4876.0, 4879.0, 4880.0, 4875.0, 4880.0, 4879.0, 4881.0, 4877.0, 4878.0, 4873.0, 4872.0, 4872.0, 4879.0, 4876.0, 4873.0, 4878.0, 4878.0, 4874.0, 4878.0, 4874.0, 4881.0, 4874.0, 4880.0, 4878.0, 4873.0, 4875.0, 4882.0, 4881.0, 4877.0, 4878.0, 4883.0, 4876.0, 4882.0, 4876.0, 4876.0, 4876.0, 4882.0, 4881.0, 4879.0, 4875.0, 4880.0, 4874.0, 4876.0, 4876.0, 4879.0, 4875.0, 4875.0, 4872.0, 4877.0, 4872.0, 4878.0, 4873.0, 4873.0, 4872.0, 4872.0, 4872.0, 4871.0, 4876.0, 4870.0, 4869.0, 4875.0, 4877.0, 4874.0, 4880.0, 4876.0, 4875.0, 4880.0, 4876.0, 4876.0, 4880.0, 4876.0, 4882.0, 4880.0, 4882.0, 4875.0, 4875.0, 4881.0, 4875.0, 4875.0, 4881.0, 4874.0, 4878.0, 4874.0, 4877.0, 4877.0, 4878.0, 4877.0, 4873.0, 4873.0, 4873.0, 4879.0, 4873.0, 4874.0, 4880.0, 4880.0, 4875.0, 4880.0, 4880.0, 4878.0, 4881.0, 4883.0, 4883.0, 4881.0, 4881.0, 4882.0, 4881.0, 4882.0, 4879.0, 4879.0, 4884.0, 4877.0, 4884.0, 4877.0, 4878.0, 4883.0, 4877.0, 4884.0, 4879.0, 4885.0, 4884.0, 4883.0, 4879.0, 4879.0, 4883.0, 4882.0, 4883.0, 4882.0, 4877.0, 4882.0, 4877.0, 4878.0, 4878.0, 4882.0, 4881.0, 4881.0, 4882.0, 4881.0, 4879.0, 4876.0, 4880.0, 4875.0, 4880.0, 4880.0, 4882.0, 4876.0, 4881.0, 4882.0, 4876.0, 4882.0, 4879.0, 4880.0, 4880.0, 4879.0, 4882.0, 4876.0, 4876.0, 4876.0, 4876.0, 4874.0, 4875.0, 4880.0, 4875.0, 4880.0, 4880.0, 4875.0, 4880.0, 4880.0, 4874.0, 4875.0, 4877.0, 4877.0, 4877.0, 4873.0, 4873.0, 4878.0, 4881.0, 4882.0, 4878.0, 4875.0, 4874.0, 4875.0, 4880.0, 4881.0, 4876.0, 4875.0, 4875.0, 4881.0, 4876.0, 4880.0, 4879.0, 4880.0, 4877.0, 4885.0, 4884.0, 4883.0, 4885.0, 4882.0, 4884.0, 4878.0, 4883.0, 4877.0, 4882.0, 4883.0, 4878.0, 4883.0, 4883.0, 4883.0, 4877.0, 4877.0, 4877.0, 4876.0, 4876.0, 4882.0, 4881.0, 4876.0, 4877.0, 4876.0, 4882.0, 4875.0, 4874.0, 4880.0, 4875.0, 4880.0, 4879.0, 4875.0, 4875.0, 4877.0, 4871.0, 4871.0, 4876.0, 4871.0, 4877.0, 4871.0, 4875.0, 4874.0, 4870.0, 4874.0, 4870.0, 4870.0, 4875.0, 4870.0, 4875.0, 4869.0])



    def _gen_best_fit_line(self, x, y):
        return np.poly1d(np.polyfit(x, y))


    def _best_fit_line(self, offset: int):
        # assert len(self.cache) == 10000

        ### do patel timestamp logix

        length = len(self.cache) * 100
        times= list(range(offset, offset + length, 100))

        # times = []

        max_bid, min_ask, mid = zip(*self.cache)
        max_bid, min_ask, mid = (
            np.array(max_bid),
            np.array(min_ask),
            np.array(mid)
        )

        return (
            self._gen_best_fit_line(times, max_bid),
            self._gen_best_fit_line(times, min_ask),
            self._gen_best_fit_line(times, mid)
        )
    
    # def take_action(self, threshold: float, curr_expec: float, pred_expec):
        
        



    def _get_expected_total(self, orders: Dict[int, int]) -> Tuple[int]:
        expected_val = 0
        total = 0

        for price in orders.keys():
            expected_val += price * abs(orders[price])
            total += abs(orders[price])

        return expected_val, total
    
    def _append_buys(self, symbol: Symbol, own_trades: List[Trade]):
      for trade in own_trades:
          if trade.buyer != '':
              self.all_buys[symbol].append(trade.price)
          elif trade.seller != '':
              self.all_buys[symbol].remove(min(self.all_buys[symbol]))

    def do_order(self, bot_orders, operator, max_vol, acceptable_price, trade_made, product, order_lst):
        reverse = False
        if trade_made == "SELL":
            reverse = True
        orders_sorted = sorted(bot_orders.keys(), reverse = reverse)
        for prices in orders_sorted:
            if operator(prices, acceptable_price):
                volume = abs(bot_orders[prices])
                vol_to_trade = min(volume, max_vol)
                max_vol -= vol_to_trade
                # In case the lowest ask is lower than our fair value,
                # This presents an opportunity for us to buy cheaply
                # The code below therefore sends a BUY order at the price level of the ask,
                # with the same quantity
                # We expect this order to trade with the sell order
                print(trade_made, str(vol_to_trade) + "x", prices)
                if trade_made == "BUY":
                    order_lst.append(Order(product, prices, vol_to_trade))
                elif trade_made == "SELL":
                    order_lst.append(Order(product, prices, -vol_to_trade))
            else: 
                break
            if max_vol <= 0:
                break

    def get_expected_price(self, state: TradingState) -> Dict[str, float]:

      ret: Dict[str, float] = {}
      for product in state.order_depths.keys():              
        expected_val = 0
        total = 0

        buy_orders = state.order_depths[product].buy_orders
        sell_orders = state.order_depths[product].sell_orders

        exp_buy, total_buy = self._get_expected_total(buy_orders)
        exp_sell, total_sell = self._get_expected_total(sell_orders)

        expected_val = exp_buy + exp_sell
        total = total_buy  + total_sell

        expected_val_total = expected_val/total if total != 0 else (self.last_slope[product]if product in self.last_slope else 0)

        expected_val_buy = exp_buy/total_buy if total_buy != 0 else 0
        expected_val_sell = exp_sell/total_sell if total_sell != 0 else float('inf')
        
        ret[product] = (expected_val_total, expected_val_buy, expected_val_sell)

      return ret
      
    def run(self, state: TradingState) -> Dict[str, List[Order]]:
        """
        Only method required. It takes all buy and sell orders for all symbols as an input,
        and outputs a list of orders to be sent
        """
        # Initialize the method output dict as an empty dict
        result = {}
        expected_val_dict = self.get_expected_price(state)

        current_iter_on_day = state.timestamp
        current = (day* 1_000_000) + self.current_iter
       

        # Iterate over all the keys (the available products) contained in the order depths
        for product in state.order_depths.keys():

            if product == "BANANAS":
                pos = state.position.get(product, 0)
                max_buy = 20 - pos
                max_sell= abs(-20 - pos)
                expected_val_tup = expected_val_dict[product]
                expected_val_total, expected_val_buy, expected_val_sell = expected_val_tup
                offset = -999900 + current
                
                self.cache.pop()
                self.cache.append(expected_val_total)

                # Retrieve the Order Depth containing all the market BUY and SELL orders for PEARLS
                order_depth: OrderDepth = state.order_depths[product]
                
                # Initialize the list of Orders to be sent as an empty list
                orders: list[Order] = []

                ## patel calls function gets model

                model = self._best_fit_line(offset)

                middle = model(current)

                self.do_order(bot_orders = order_depth.sell_orders, operator = operator.lt, max_vol = max_buy, acceptable_price= middle, trade_made="BUY", product=product, order_lst = orders)

                self.do_order(bot_orders = order_depth.buy_orders, operator = operator.gt, max_vol = max_sell, acceptable_price= middle, trade_made="SELL", product=product, order_lst = orders)

                result[product] = orders

        self.current_iter += 100


                


        return result
    
def main():
    timestamp = 1000

    listings = {
        "BANANAS": Listing(
            symbol="BANANAS", 
            product="BANANAS", 
            denomination= "SEASHELLS"
        ),
        "PEARLS": Listing(
            symbol="PEARLS", 
            product="PEARLS", 
            denomination= "SEASHELLS"
        ),
    }

    od = OrderDepth()
    od.buy_orders = {10: 7, 9: 5}
    od.sell_orders = {11: -4, 12: -8}

    od2 = OrderDepth()
    od2.buy_orders = {142: 3, 141: 5}
    od2.sell_orders = {144: -5, 145: -8}

    order_depths = {
        "BANANAS": od,
        "PEARLS": od2,	
    }

    own_trades = {
        "BANANAS": [],
        "PEARLS": []
    }

    market_trades = {
        "BANANAS": [
            Trade(
                symbol="BANANAS",
                price=11,
                quantity=4,
                buyer="",
                seller="",
                timestamp=900
            )
        ],
        "PEARLS": []
    }

    position = {
        "BANANAS": 3,
        "PEARLS": -5
    }

    observations = {}

    state = TradingState(
        timestamp=timestamp,
        listings=listings,
        order_depths=order_depths,
        own_trades = own_trades,
        market_trades = market_trades,
        position = position,
        observations = observations
    )
    trader1 = Trader()
    trader1.run(state)

if __name__ == "__main__":
    main()
